def tryme(libraryGroupId,libraryVersion,libraryArtifactId,aarpath,jarpath){
    publishing {
        publications {
            aar(MavenPublication) {
                groupId libraryGroupId
                version libraryVersion
                artifactId libraryArtifactId

                println("->->-> publish.aar() groupId: " + groupId + ", artifact " + artifactId + ", version: " + version )

                artifact(aarpath)

                // The publication doesn't know about our dependencies,
                // so we have to manually add them to the pom.
                pomCreation(libraryGroupId,libraryVersion)
            }
            jar(MavenPublication) {
                groupId libraryGroupId
                version libraryVersion
                artifactId libraryArtifactId

                artifact(jarpath)

                // The publication doesn't know about our dependencies,
                // so we have to manually add them to the pom.
                pomCreation(libraryGroupId,libraryVersion)
            }
        }
    }

}

def pomCreation(libraryGroupId,libraryVersion, pom) {
    pom.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')

        // Iterate over the compile dependencies (we don't want the test ones),
        // adding a <dependency> node for each.
        configurations.api.allDependencies.each {
            if (it.group != null && it.name != null) {
                println("->->-> dependency: " + it.name + ", group: " + it.group)
                def dependencyNode = dependenciesNode.appendNode('dependency')
                if (it.name == 'AndroidSDKCore') {
                    println('adding Leanplum-core')
                    dependencyNode.appendNode('groupId', libraryGroupId)
                    dependencyNode.appendNode('artifactId', 'Leanplum-core')
                    dependencyNode.appendNode('version', libraryVersion)
                    dependencyNode.appendNode('scope', 'compile')
                } else if (it.name == 'AndroidSDKLocation') {
                    println('adding Leanplum-location')
                    dependencyNode.appendNode('groupId', libraryGroupId)
                    dependencyNode.appendNode('artifactId', 'Leanplum-location')
                    dependencyNode.appendNode('version', libraryVersion)
                    dependencyNode.appendNode('scope', 'compile')
                } else if (it.name == 'AndroidSDKPush') {
                    println('adding Leanplum-push')
                    dependencyNode.appendNode('groupId', libraryGroupId)
                    dependencyNode.appendNode('artifactId', 'Leanplum-push')
                    dependencyNode.appendNode('version', libraryVersion)
                    dependencyNode.appendNode('scope', 'compile')
                } else if (it.name == 'AndroidSDKGcm') {
                    println('found Leanplum-gcm')
                    dependencyNode.appendNode('groupId', libraryGroupId)
                    dependencyNode.appendNode('artifactId', 'Leanplum-gcm')
                    dependencyNode.appendNode('version', libraryVersion)
                    dependencyNode.appendNode('scope', 'compile')
                } else if (it.name == 'AndroidSDKFcm') {
                    println('found Leanplum-fcm')
                    dependencyNode.appendNode('groupId', libraryGroupId)
                    dependencyNode.appendNode('artifactId', 'Leanplum-fcm')
                    dependencyNode.appendNode('version', libraryVersion)
                    dependencyNode.appendNode('scope', 'compile')
                } else {
                    println('found non-null dependency: ' + it.name + " group: " + it.group)
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
        configurations.releaseApi.allDependencies.each {
            if (it.group != null && it.name != null) {
                println("->->-> dependency: " + it.name + ", group: " + it.group)
                def dependencyNode = dependenciesNode.appendNode('dependency')
                if (it.name == 'AndroidSDKCore') {
                    println('adding Leanplum-core')
                    dependencyNode.appendNode('groupId', libraryGroupId)
                    dependencyNode.appendNode('artifactId', 'Leanplum-core')
                    dependencyNode.appendNode('version', libraryVersion)
                    dependencyNode.appendNode('scope', 'compile')
                } else if (it.name == 'AndroidSDKLocation') {
                    println('adding Leanplum-location')
                    dependencyNode.appendNode('groupId', libraryGroupId)
                    dependencyNode.appendNode('artifactId', 'Leanplum-location')
                    dependencyNode.appendNode('version', libraryVersion)
                    dependencyNode.appendNode('scope', 'compile')
                } else if (it.name == 'AndroidSDKPush') {
                    println('adding Leanplum-push')
                    dependencyNode.appendNode('groupId', libraryGroupId)
                    dependencyNode.appendNode('artifactId', 'Leanplum-push')
                    dependencyNode.appendNode('version', libraryVersion)
                    dependencyNode.appendNode('scope', 'compile')
                } else if (it.name == 'AndroidSDKGcm') {
                    println('found Leanplum-gcm')
                    dependencyNode.appendNode('groupId', libraryGroupId)
                    dependencyNode.appendNode('artifactId', 'Leanplum-gcm')
                    dependencyNode.appendNode('version', libraryVersion)
                    dependencyNode.appendNode('scope', 'compile')
                } else if (it.name == 'AndroidSDKFcm') {
                    println('found Leanplum-fcm')
                    dependencyNode.appendNode('groupId', libraryGroupId)
                    dependencyNode.appendNode('artifactId', 'Leanplum-fcm')
                    dependencyNode.appendNode('version', libraryVersion)
                    dependencyNode.appendNode('scope', 'compile')
                } else {
                    println('found non-null dependency: ' + it.name + " group: " + it.group)
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}
def commonMethod2(param) {
    return true
}

// Export methods by turning them into closures
ext {
    pomCreation = this.&pomCreation
    otherNameForMethod2 = this.&commonMethod2
    tryme = this.&tryme
}